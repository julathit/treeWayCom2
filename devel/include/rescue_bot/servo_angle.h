// Generated by gencpp from file rescue_bot/servo_angle.msg
// DO NOT EDIT!


#ifndef RESCUE_BOT_MESSAGE_SERVO_ANGLE_H
#define RESCUE_BOT_MESSAGE_SERVO_ANGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rescue_bot
{
template <class ContainerAllocator>
struct servo_angle_
{
  typedef servo_angle_<ContainerAllocator> Type;

  servo_angle_()
    : servo_1(0)
    , servo_2(0)
    , servo_3(0)
    , servo_4(0)  {
    }
  servo_angle_(const ContainerAllocator& _alloc)
    : servo_1(0)
    , servo_2(0)
    , servo_3(0)
    , servo_4(0)  {
  (void)_alloc;
    }



   typedef int16_t _servo_1_type;
  _servo_1_type servo_1;

   typedef int16_t _servo_2_type;
  _servo_2_type servo_2;

   typedef int16_t _servo_3_type;
  _servo_3_type servo_3;

   typedef int16_t _servo_4_type;
  _servo_4_type servo_4;





  typedef boost::shared_ptr< ::rescue_bot::servo_angle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rescue_bot::servo_angle_<ContainerAllocator> const> ConstPtr;

}; // struct servo_angle_

typedef ::rescue_bot::servo_angle_<std::allocator<void> > servo_angle;

typedef boost::shared_ptr< ::rescue_bot::servo_angle > servo_anglePtr;
typedef boost::shared_ptr< ::rescue_bot::servo_angle const> servo_angleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rescue_bot::servo_angle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rescue_bot::servo_angle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rescue_bot::servo_angle_<ContainerAllocator1> & lhs, const ::rescue_bot::servo_angle_<ContainerAllocator2> & rhs)
{
  return lhs.servo_1 == rhs.servo_1 &&
    lhs.servo_2 == rhs.servo_2 &&
    lhs.servo_3 == rhs.servo_3 &&
    lhs.servo_4 == rhs.servo_4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rescue_bot::servo_angle_<ContainerAllocator1> & lhs, const ::rescue_bot::servo_angle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rescue_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rescue_bot::servo_angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rescue_bot::servo_angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rescue_bot::servo_angle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rescue_bot::servo_angle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rescue_bot::servo_angle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rescue_bot::servo_angle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rescue_bot::servo_angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15c6708a289bad19b3aa103b1ef56bbc";
  }

  static const char* value(const ::rescue_bot::servo_angle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15c6708a289bad19ULL;
  static const uint64_t static_value2 = 0xb3aa103b1ef56bbcULL;
};

template<class ContainerAllocator>
struct DataType< ::rescue_bot::servo_angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rescue_bot/servo_angle";
  }

  static const char* value(const ::rescue_bot::servo_angle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rescue_bot::servo_angle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 servo_1\n"
"int16 servo_2\n"
"int16 servo_3\n"
"int16 servo_4\n"
;
  }

  static const char* value(const ::rescue_bot::servo_angle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rescue_bot::servo_angle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_1);
      stream.next(m.servo_2);
      stream.next(m.servo_3);
      stream.next(m.servo_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct servo_angle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rescue_bot::servo_angle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rescue_bot::servo_angle_<ContainerAllocator>& v)
  {
    s << indent << "servo_1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo_1);
    s << indent << "servo_2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo_2);
    s << indent << "servo_3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo_3);
    s << indent << "servo_4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.servo_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RESCUE_BOT_MESSAGE_SERVO_ANGLE_H
